# commands.yaml
# Syndesi
#
# SÃ©bastien Deriaz
# 20.06.2022
# 
# This file describe every commands used in the Syndesi Communication Protocol (SCP)
# - Requests : host -> device
# - Replies  : device -> host
#
# Each command is used both ways (as a request, then as a reply). Therefor each command as request fields and reply fields
# The fields are described in order as such
#   request_content:        # this is an empty command
#   reply_content:        # the reply has some data
#     length:
#       size: 1
#       type: "uint"
#     name:
#       size: length
#       type: "string"
# 
# In this case, the reply contains a length variable (0-255) specifying the number of bytes in the following string
#
# SUPPORTED TYPES
# - "short"      signed short (2 bytes)
# - "ushort"     unsigned short (2 bytes)
# - "int"        signed integer (4 bytes)
# - "uint"       unsigned integer (4 bytes)
# - "longlong"   signed integer (8 bytes)
# - "ulonglong"  unsigned long (8 bytes)
# - "float"      single precision (4 bytes)
# - "double"     double precision (8 bytes)
# - "byte"       used for byte arrays
# - "char"       used for strings (constant length)
# - ['A', 'B']   enum (1 byte)
# 
# The content is described for both request and reply
# 
# CATEGORIES
# 0x00XX : Control
# 0x010X : Raw register read/write
# 0x011X : SPI
# 0x012X : I2C
# 0x013X : UART

Settings:
Commands:
# List of available commands
# Control
  - alias: NO_COMMAND
    ID: 0x0000
    comment: "No command"
# Generic error command
  - alias: ERROR
    ID: 0x0001
    comment: "Generic Error"
    # The request doesn't exist
    reply_content:
      error_code:
        type: ['INVALID_FRAME', 'OTHER', 'NO_CALLBACK']
# Device discover
  - alias: DEVICE_DISCOVER
    ID: 0x0002
    comment: "Discover frame"
    request_content:
    reply_content:
      ID:
        size: 20
        type: "byte"
      syndesi_protocol_version:
        type: "uint"
      device_version:
        type: "uint"
      name_length:
        type: "uint"
      name:
        size: "name_length"
        type: "char"
      description_length:
        type: "uint"
      description:
        size: description_length 
        type: "char"
# Register read
  - alias: REGISTER_READ_16
    ID: 0x0100
    comment: "Read register (with register index)"
    request_content:
      address:
        type: "uint"
    reply_content:
      data:
        type: "uint"
# Register write
  - alias: REGISTER_WRITE_16
    ID: 0x0101
    comment: "Write register (with register index)"
    request_content:
      address:
        type: "uint"
      data:
        type: "uint"
    reply_content:
      status:
        type: ['OK', 'NOK']
# SPI read
  - alias: SPI_READ_WRITE
    ID: 0x0110
    comment: "Read and write SPI data (with interface index)"
    request_content:
      interface_index:
        type: "uint"
      write_size:
        type: "uint"
      write_data:
        size: write_size
        type: "byte"
    reply_content:
      read_size:
        type: "uint"
      read_data:
        size: read_size
        type: "byte"
# SPI write
  - alias: SPI_WRITE_ONLY
    ID: 0x0111
    comment: "Write SPI data (with interface index)"
    request_content:
      interface_index:
        type: "uint"
      write_size:
        type: "uint"
      write_data:
        size: write_size
        type: "byte"
    reply_content:
      status:
        type: ['OK', 'NOK']
# I2C
  - alias: I2C_READ
    ID: 0x0120
    comment: "Read I2C data (with interface index)"
    request_content:
      interface_index:
        type: "uint"
      read_size:
        type: "uint"
    reply_content:
      read_size:
        type: "uint"
      read_data:
        size: read_size
        type: "byte"
  - alias: I2C_WRITE
    ID: 0x0121
    comment: "Write I2C data (with interface index)"
    request_content:
      interface_index:
        type: "uint"
      write_size:
        type: "uint"
      write_data:
        size: write_size
        type: "byte"
    reply_content:
      status:
        type: ['OK', 'NOK']
