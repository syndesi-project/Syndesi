/* THIS FILE IS GENERATED AUTOMATICALLY
*  DO NOT EDIT
*  This file has been written by the script >>>file<<<
*  date : >>>date<<<
*
*  Template :
* @file framemanager.h
*
* @brief Management of frames
*
* @author SÃ©bastien Deriaz
* @date 15.08.2022
*/

#ifndef FRAME_MANAGER_H
#define FRAME_MANAGER_H

#include "callbacks.h"

using namespace std;

namespace syndesi {

/**
 * @brief Class to manage frames after they've been parsed by the network
 * interface
 *
 */
class FrameManager : SAP::IFrameManager_bottom, SAP::IFrameManager_top {
    friend class Core;

   public:
    FrameManager(){};
    ~FrameManager(){};

   private:
    /*
     * Upper layer
     */
    Callbacks* _callbacks = nullptr;
    void registerCallbacks(Callbacks* callbacks) { _callbacks = callbacks; };
    // From core
    bool request(Frame& frame);
    /*
     * Lower layer
     */
    SAP::INetwork_top* network = nullptr;
    void registerNetwork(SAP::INetwork_top* _network) { network = _network; };
    
    /* Indication (incoming from host)*/
    void indication(Frame& frame) {
        Buffer* requestPayloadBuffer = frame.getPayloadBuffer();
        Payload* reply = nullptr;
        Payload* request = nullptr;

        switch(frame.getCommand()) {
    >>>switch_request<<<
        }

        Frame replyFrame(reply, frame.getID(), false);
        network->response(replyFrame);
    }

    /* Confirm (incoming from device)*/
    void confirm(Frame& frame) {
        Buffer* replyPayloadBuffer = frame.getPayloadBuffer();
        Payload* reply = nullptr;

        switch(frame.getCommand()) {
    >>>switch_reply<<<
        }
    }

};

}  // namespace syndesi

#endif  // FRAME_MANAGER_H
